// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"gorm.io/plugin/dbresolver"

	"github.com/go-sonic/sonic/model/entity"
)

func newMeta(db *gorm.DB, opts ...gen.DOOption) meta {
	_meta := meta{}

	_meta.metaDo.UseDB(db, opts...)
	_meta.metaDo.UseModel(&entity.Meta{})

	tableName := _meta.metaDo.TableName()
	_meta.ALL = field.NewAsterisk(tableName)
	_meta.ID = field.NewInt32(tableName, "id")
	_meta.Type = field.NewField(tableName, "type")
	_meta.CreateTime = field.NewTime(tableName, "create_time")
	_meta.UpdateTime = field.NewTime(tableName, "update_time")
	_meta.MetaKey = field.NewString(tableName, "meta_key")
	_meta.PostID = field.NewInt32(tableName, "post_id")
	_meta.MetaValue = field.NewString(tableName, "meta_value")

	_meta.fillFieldMap()

	return _meta
}

type meta struct {
	metaDo metaDo

	ALL        field.Asterisk
	ID         field.Int32
	Type       field.Field
	CreateTime field.Time
	UpdateTime field.Time
	MetaKey    field.String
	PostID     field.Int32
	MetaValue  field.String

	fieldMap map[string]field.Expr
}

func (m meta) Table(newTableName string) *meta {
	m.metaDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m meta) As(alias string) *meta {
	m.metaDo.DO = *(m.metaDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *meta) updateTableName(table string) *meta {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Type = field.NewField(table, "type")
	m.CreateTime = field.NewTime(table, "create_time")
	m.UpdateTime = field.NewTime(table, "update_time")
	m.MetaKey = field.NewString(table, "meta_key")
	m.PostID = field.NewInt32(table, "post_id")
	m.MetaValue = field.NewString(table, "meta_value")

	m.fillFieldMap()

	return m
}

func (m *meta) WithContext(ctx context.Context) *metaDo { return m.metaDo.WithContext(ctx) }

func (m meta) TableName() string { return m.metaDo.TableName() }

func (m meta) Alias() string { return m.metaDo.Alias() }

func (m *meta) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *meta) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["type"] = m.Type
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["update_time"] = m.UpdateTime
	m.fieldMap["meta_key"] = m.MetaKey
	m.fieldMap["post_id"] = m.PostID
	m.fieldMap["meta_value"] = m.MetaValue
}

func (m meta) clone(db *gorm.DB) meta {
	m.metaDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m meta) replaceDB(db *gorm.DB) meta {
	m.metaDo.ReplaceDB(db)
	return m
}

type metaDo struct{ gen.DO }

func (m metaDo) Debug() *metaDo {
	return m.withDO(m.DO.Debug())
}

func (m metaDo) WithContext(ctx context.Context) *metaDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m metaDo) ReadDB() *metaDo {
	return m.Clauses(dbresolver.Read)
}

func (m metaDo) WriteDB() *metaDo {
	return m.Clauses(dbresolver.Write)
}

func (m metaDo) Session(config *gorm.Session) *metaDo {
	return m.withDO(m.DO.Session(config))
}

func (m metaDo) Clauses(conds ...clause.Expression) *metaDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m metaDo) Returning(value interface{}, columns ...string) *metaDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m metaDo) Not(conds ...gen.Condition) *metaDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m metaDo) Or(conds ...gen.Condition) *metaDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m metaDo) Select(conds ...field.Expr) *metaDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m metaDo) Where(conds ...gen.Condition) *metaDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m metaDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *metaDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m metaDo) Order(conds ...field.Expr) *metaDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m metaDo) Distinct(cols ...field.Expr) *metaDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m metaDo) Omit(cols ...field.Expr) *metaDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m metaDo) Join(table schema.Tabler, on ...field.Expr) *metaDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m metaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *metaDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m metaDo) RightJoin(table schema.Tabler, on ...field.Expr) *metaDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m metaDo) Group(cols ...field.Expr) *metaDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m metaDo) Having(conds ...gen.Condition) *metaDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m metaDo) Limit(limit int) *metaDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m metaDo) Offset(offset int) *metaDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m metaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *metaDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m metaDo) Unscoped() *metaDo {
	return m.withDO(m.DO.Unscoped())
}

func (m metaDo) Create(values ...*entity.Meta) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m metaDo) CreateInBatches(values []*entity.Meta, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m metaDo) Save(values ...*entity.Meta) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m metaDo) First() (*entity.Meta, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Meta), nil
	}
}

func (m metaDo) Take() (*entity.Meta, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Meta), nil
	}
}

func (m metaDo) Last() (*entity.Meta, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Meta), nil
	}
}

func (m metaDo) Find() ([]*entity.Meta, error) {
	result, err := m.DO.Find()
	return result.([]*entity.Meta), err
}

func (m metaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Meta, err error) {
	buf := make([]*entity.Meta, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m metaDo) FindInBatches(result *[]*entity.Meta, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m metaDo) Attrs(attrs ...field.AssignExpr) *metaDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m metaDo) Assign(attrs ...field.AssignExpr) *metaDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m metaDo) Joins(fields ...field.RelationField) *metaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m metaDo) Preload(fields ...field.RelationField) *metaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m metaDo) FirstOrInit() (*entity.Meta, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Meta), nil
	}
}

func (m metaDo) FirstOrCreate() (*entity.Meta, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Meta), nil
	}
}

func (m metaDo) FindByPage(offset int, limit int) (result []*entity.Meta, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m metaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m metaDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m metaDo) Delete(models ...*entity.Meta) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *metaDo) withDO(do gen.Dao) *metaDo {
	m.DO = *do.(*gen.DO)
	return m
}
