// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sonic/sonic/model/entity"
)

func newApplicationPassword(db *gorm.DB, opts ...gen.DOOption) applicationPassword {
	_applicationPassword := applicationPassword{}

	_applicationPassword.applicationPasswordDo.UseDB(db, opts...)
	_applicationPassword.applicationPasswordDo.UseModel(&entity.ApplicationPassword{})

	tableName := _applicationPassword.applicationPasswordDo.TableName()
	_applicationPassword.ALL = field.NewAsterisk(tableName)
	_applicationPassword.ID = field.NewInt32(tableName, "id")
	_applicationPassword.CreateTime = field.NewTime(tableName, "create_time")
	_applicationPassword.UpdateTime = field.NewTime(tableName, "update_time")
	_applicationPassword.Name = field.NewString(tableName, "name")
	_applicationPassword.Password = field.NewString(tableName, "password")
	_applicationPassword.UserID = field.NewInt32(tableName, "user_id")
	_applicationPassword.LastActivateTime = field.NewTime(tableName, "last_activate_time")
	_applicationPassword.LastActivateIP = field.NewString(tableName, "last_activate_ip")

	_applicationPassword.fillFieldMap()

	return _applicationPassword
}

type applicationPassword struct {
	applicationPasswordDo applicationPasswordDo

	ALL              field.Asterisk
	ID               field.Int32
	CreateTime       field.Time
	UpdateTime       field.Time
	Name             field.String
	Password         field.String
	UserID           field.Int32
	LastActivateTime field.Time
	LastActivateIP   field.String

	fieldMap map[string]field.Expr
}

func (a applicationPassword) Table(newTableName string) *applicationPassword {
	a.applicationPasswordDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a applicationPassword) As(alias string) *applicationPassword {
	a.applicationPasswordDo.DO = *(a.applicationPasswordDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *applicationPassword) updateTableName(table string) *applicationPassword {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.Name = field.NewString(table, "name")
	a.Password = field.NewString(table, "password")
	a.UserID = field.NewInt32(table, "user_id")
	a.LastActivateTime = field.NewTime(table, "last_activate_time")
	a.LastActivateIP = field.NewString(table, "last_activate_ip")

	a.fillFieldMap()

	return a
}

func (a *applicationPassword) WithContext(ctx context.Context) *applicationPasswordDo {
	return a.applicationPasswordDo.WithContext(ctx)
}

func (a applicationPassword) TableName() string { return a.applicationPasswordDo.TableName() }

func (a applicationPassword) Alias() string { return a.applicationPasswordDo.Alias() }

func (a applicationPassword) Columns(cols ...field.Expr) gen.Columns {
	return a.applicationPasswordDo.Columns(cols...)
}

func (a *applicationPassword) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *applicationPassword) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["name"] = a.Name
	a.fieldMap["password"] = a.Password
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["last_activate_time"] = a.LastActivateTime
	a.fieldMap["last_activate_ip"] = a.LastActivateIP
}

func (a applicationPassword) clone(db *gorm.DB) applicationPassword {
	a.applicationPasswordDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a applicationPassword) replaceDB(db *gorm.DB) applicationPassword {
	a.applicationPasswordDo.ReplaceDB(db)
	return a
}

type applicationPasswordDo struct{ gen.DO }

func (a applicationPasswordDo) Debug() *applicationPasswordDo {
	return a.withDO(a.DO.Debug())
}

func (a applicationPasswordDo) WithContext(ctx context.Context) *applicationPasswordDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a applicationPasswordDo) ReadDB() *applicationPasswordDo {
	return a.Clauses(dbresolver.Read)
}

func (a applicationPasswordDo) WriteDB() *applicationPasswordDo {
	return a.Clauses(dbresolver.Write)
}

func (a applicationPasswordDo) Session(config *gorm.Session) *applicationPasswordDo {
	return a.withDO(a.DO.Session(config))
}

func (a applicationPasswordDo) Clauses(conds ...clause.Expression) *applicationPasswordDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a applicationPasswordDo) Returning(value interface{}, columns ...string) *applicationPasswordDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a applicationPasswordDo) Not(conds ...gen.Condition) *applicationPasswordDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a applicationPasswordDo) Or(conds ...gen.Condition) *applicationPasswordDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a applicationPasswordDo) Select(conds ...field.Expr) *applicationPasswordDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a applicationPasswordDo) Where(conds ...gen.Condition) *applicationPasswordDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a applicationPasswordDo) Order(conds ...field.Expr) *applicationPasswordDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a applicationPasswordDo) Distinct(cols ...field.Expr) *applicationPasswordDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a applicationPasswordDo) Omit(cols ...field.Expr) *applicationPasswordDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a applicationPasswordDo) Join(table schema.Tabler, on ...field.Expr) *applicationPasswordDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a applicationPasswordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *applicationPasswordDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a applicationPasswordDo) RightJoin(table schema.Tabler, on ...field.Expr) *applicationPasswordDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a applicationPasswordDo) Group(cols ...field.Expr) *applicationPasswordDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a applicationPasswordDo) Having(conds ...gen.Condition) *applicationPasswordDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a applicationPasswordDo) Limit(limit int) *applicationPasswordDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a applicationPasswordDo) Offset(offset int) *applicationPasswordDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a applicationPasswordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *applicationPasswordDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a applicationPasswordDo) Unscoped() *applicationPasswordDo {
	return a.withDO(a.DO.Unscoped())
}

func (a applicationPasswordDo) Create(values ...*entity.ApplicationPassword) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a applicationPasswordDo) CreateInBatches(values []*entity.ApplicationPassword, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a applicationPasswordDo) Save(values ...*entity.ApplicationPassword) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a applicationPasswordDo) First() (*entity.ApplicationPassword, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ApplicationPassword), nil
	}
}

func (a applicationPasswordDo) Take() (*entity.ApplicationPassword, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ApplicationPassword), nil
	}
}

func (a applicationPasswordDo) Last() (*entity.ApplicationPassword, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ApplicationPassword), nil
	}
}

func (a applicationPasswordDo) Find() ([]*entity.ApplicationPassword, error) {
	result, err := a.DO.Find()
	return result.([]*entity.ApplicationPassword), err
}

func (a applicationPasswordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ApplicationPassword, err error) {
	buf := make([]*entity.ApplicationPassword, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a applicationPasswordDo) FindInBatches(result *[]*entity.ApplicationPassword, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a applicationPasswordDo) Attrs(attrs ...field.AssignExpr) *applicationPasswordDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a applicationPasswordDo) Assign(attrs ...field.AssignExpr) *applicationPasswordDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a applicationPasswordDo) Joins(fields ...field.RelationField) *applicationPasswordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a applicationPasswordDo) Preload(fields ...field.RelationField) *applicationPasswordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a applicationPasswordDo) FirstOrInit() (*entity.ApplicationPassword, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ApplicationPassword), nil
	}
}

func (a applicationPasswordDo) FirstOrCreate() (*entity.ApplicationPassword, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ApplicationPassword), nil
	}
}

func (a applicationPasswordDo) FindByPage(offset int, limit int) (result []*entity.ApplicationPassword, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a applicationPasswordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a applicationPasswordDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a applicationPasswordDo) Delete(models ...*entity.ApplicationPassword) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *applicationPasswordDo) withDO(do gen.Dao) *applicationPasswordDo {
	a.DO = *do.(*gen.DO)
	return a
}
